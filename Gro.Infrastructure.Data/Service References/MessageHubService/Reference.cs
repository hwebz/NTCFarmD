//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gro.Infrastructure.Data.MessageHubService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MessageHubService.IMessagehubService")]
    public interface IMessagehubService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetPlannedDeliveries", ReplyAction="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesResponse")]
        Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries GetPlannedDeliveries(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetPlannedDeliveries", ReplyAction="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries> GetPlannedDeliveriesAsync(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesList", ReplyAction="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesListResponse")]
        Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries[] GetPlannedDeliveriesList(int customerId, int messageId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesList", ReplyAction="http://tempuri.org/IMessagehubService/GetPlannedDeliveriesListResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries[]> GetPlannedDeliveriesListAsync(int customerId, int messageId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetDeliverySummary", ReplyAction="http://tempuri.org/IMessagehubService/GetDeliverySummaryResponse")]
        Gro.Core.DataModels.MessageHubDtos.DeliveryInformation GetDeliverySummary(int customerId, int noOfItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetDeliverySummary", ReplyAction="http://tempuri.org/IMessagehubService/GetDeliverySummaryResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.DeliveryInformation> GetDeliverySummaryAsync(int customerId, int noOfItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_GetCategoriesAndTypes", ReplyAction="http://tempuri.org/IMessagehubService/Admin_GetCategoriesAndTypesResponse")]
        Gro.Core.DataModels.MessageHubDtos.Category[] Admin_GetCategoriesAndTypes(bool showTipsAndInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_GetCategoriesAndTypes", ReplyAction="http://tempuri.org/IMessagehubService/Admin_GetCategoriesAndTypesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Category[]> Admin_GetCategoriesAndTypesAsync(bool showTipsAndInformation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_GetMessages", ReplyAction="http://tempuri.org/IMessagehubService/Admin_GetMessagesResponse")]
        Gro.Core.DataModels.MessageHubDtos.Message[] Admin_GetMessages(int pageSize, int pageIndex, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_GetMessages", ReplyAction="http://tempuri.org/IMessagehubService/Admin_GetMessagesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message[]> Admin_GetMessagesAsync(int pageSize, int pageIndex, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_CountMessages", ReplyAction="http://tempuri.org/IMessagehubService/Admin_CountMessagesResponse")]
        int Admin_CountMessages(string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/Admin_CountMessages", ReplyAction="http://tempuri.org/IMessagehubService/Admin_CountMessagesResponse")]
        System.Threading.Tasks.Task<int> Admin_CountMessagesAsync(string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessage", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageResponse")]
        bool DeleteMessage(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessage", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageResponse")]
        System.Threading.Tasks.Task<bool> DeleteMessageAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteEnvValue", ReplyAction="http://tempuri.org/IMessagehubService/DeleteEnvValueResponse")]
        bool DeleteEnvValue(string envType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteEnvValue", ReplyAction="http://tempuri.org/IMessagehubService/DeleteEnvValueResponse")]
        System.Threading.Tasks.Task<bool> DeleteEnvValueAsync(string envType, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteFromTrash", ReplyAction="http://tempuri.org/IMessagehubService/DeleteFromTrashResponse")]
        bool DeleteFromTrash(int userId, int[] msgIdsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteFromTrash", ReplyAction="http://tempuri.org/IMessagehubService/DeleteFromTrashResponse")]
        System.Threading.Tasks.Task<bool> DeleteFromTrashAsync(int userId, int[] msgIdsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageRightsResponse")]
        bool DeleteMessageRights(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageRightsResponse")]
        System.Threading.Tasks.Task<bool> DeleteMessageRightsAsync(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageSettingsResponse")]
        bool DeleteMessageSettings(int settingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/DeleteMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/DeleteMessageSettingsResponse")]
        System.Threading.Tasks.Task<bool> DeleteMessageSettingsAsync(int settingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/EmptyTrash", ReplyAction="http://tempuri.org/IMessagehubService/EmptyTrashResponse")]
        bool EmptyTrash(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/EmptyTrash", ReplyAction="http://tempuri.org/IMessagehubService/EmptyTrashResponse")]
        System.Threading.Tasks.Task<bool> EmptyTrashAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetAllMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetAllMessagesResponse")]
        Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[] GetAllMessages(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetAllMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[]> GetAllMessagesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMsgSettingsDisplay", ReplyAction="http://tempuri.org/IMessagehubService/GetMsgSettingsDisplayResponse")]
        Gro.Core.DataModels.MessageHubDtos.MessageSettingsDisplay GetMsgSettingsDisplay(int userId, int CustomerOrgid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMsgSettingsDisplay", ReplyAction="http://tempuri.org/IMessagehubService/GetMsgSettingsDisplayResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageSettingsDisplay> GetMsgSettingsDisplayAsync(int userId, int CustomerOrgid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesForAdHoc", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesForAdHocResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesForAdHoc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesForAdHoc", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesForAdHocResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesForAdHocAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesByStatus", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesByStatusResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesByStatus(int userId, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesByStatus", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesByStatusResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesByStatusAsync(int userId, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesForFilter", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesForFilterResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesForFilter(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategoriesForFilter", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesForFilterResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesForFilterAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategories", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategories(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetCategories", ReplyAction="http://tempuri.org/IMessagehubService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetEnvValues", ReplyAction="http://tempuri.org/IMessagehubService/GetEnvValuesResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetEnvValues(string envType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetEnvValues", ReplyAction="http://tempuri.org/IMessagehubService/GetEnvValuesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetEnvValuesAsync(string envType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetInboxInformation", ReplyAction="http://tempuri.org/IMessagehubService/GetInboxInformationResponse")]
        int[] GetInboxInformation(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetInboxInformation", ReplyAction="http://tempuri.org/IMessagehubService/GetInboxInformationResponse")]
        System.Threading.Tasks.Task<int[]> GetInboxInformationAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetDeliveryAddress", ReplyAction="http://tempuri.org/IMessagehubService/GetDeliveryAddressResponse")]
        Gro.Core.DataModels.MessageHubDtos.DeliveryAddress GetDeliveryAddress(string customerNr, string addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetDeliveryAddress", ReplyAction="http://tempuri.org/IMessagehubService/GetDeliveryAddressResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.DeliveryAddress> GetDeliveryAddressAsync(string customerNr, string addressId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessage", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageResponse")]
        System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> GetMessage(int msgId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessage", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]>> GetMessageAsync(int msgId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageDeliveryTypes", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageDeliveryTypesResponse")]
        string[] GetMessageDeliveryTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageDeliveryTypes", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageDeliveryTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetMessageDeliveryTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageOnly", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageOnlyResponse")]
        Gro.Core.DataModels.MessageHubDtos.Message GetMessageOnly(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageOnly", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageOnlyResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message> GetMessageOnlyAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessagesNotRead", ReplyAction="http://tempuri.org/IMessagehubService/GetMessagesNotReadResponse")]
        Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[] GetMessagesNotRead(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessagesNotRead", ReplyAction="http://tempuri.org/IMessagehubService/GetMessagesNotReadResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[]> GetMessagesNotReadAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageRightsResponse")]
        Gro.Core.DataModels.MessageHubDtos.MessageRights[] GetMessageRights(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageRightsResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageRights[]> GetMessageRightsAsync(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/CountMessages", ReplyAction="http://tempuri.org/IMessagehubService/CountMessagesResponse")]
        int CountMessages(int userId, string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/CountMessages", ReplyAction="http://tempuri.org/IMessagehubService/CountMessagesResponse")]
        System.Threading.Tasks.Task<int> CountMessagesAsync(int userId, string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetMessagesResponse")]
        Gro.Core.DataModels.MessageHubDtos.Message[] GetMessages(int userId, int pageSize, int pageIndex, string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetMessagesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message[]> GetMessagesAsync(int userId, int pageSize, int pageIndex, string allOrUnRead, string[] categories, string[] types, string[] statuses);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageSettingsResponse")]
        Gro.Core.DataModels.MessageHubDtos.MessageSettings[] GetMessageSettings(int userId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageSettingsResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageSettings[]> GetMessageSettingsAsync(int userId, int organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageTypes", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageTypesResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetMessageTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageTypes", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageTypesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetMessageTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageStatuses", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageStatusesResponse")]
        Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetMessageStatuses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetMessageStatuses", ReplyAction="http://tempuri.org/IMessagehubService/GetMessageStatusesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetMessageStatusesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetReceivers", ReplyAction="http://tempuri.org/IMessagehubService/GetReceiversResponse")]
        string[] GetReceivers(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetReceivers", ReplyAction="http://tempuri.org/IMessagehubService/GetReceiversResponse")]
        System.Threading.Tasks.Task<string[]> GetReceiversAsync(int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetSubscribers", ReplyAction="http://tempuri.org/IMessagehubService/GetSubscribersResponse")]
        System.Collections.Generic.KeyValuePair<int, int>[] GetSubscribers(int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetSubscribers", ReplyAction="http://tempuri.org/IMessagehubService/GetSubscribersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, int>[]> GetSubscribersAsync(int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetUserMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetUserMessagesResponse")]
        Gro.Core.DataModels.MyProfile.UserMessage[] GetUserMessages(int userId, string allOrUnRead, int startIdx, int endIdx, string categoryIds, string typeIds, string statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetUserMessages", ReplyAction="http://tempuri.org/IMessagehubService/GetUserMessagesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MyProfile.UserMessage[]> GetUserMessagesAsync(int userId, string allOrUnRead, int startIdx, int endIdx, string categoryIds, string typeIds, string statusId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetUserMessage", ReplyAction="http://tempuri.org/IMessagehubService/GetUserMessageResponse")]
        Gro.Core.DataModels.MyProfile.UserMessage GetUserMessage(int userId, int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/GetUserMessage", ReplyAction="http://tempuri.org/IMessagehubService/GetUserMessageResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MyProfile.UserMessage> GetUserMessageAsync(int userId, int msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/MarkAsStared", ReplyAction="http://tempuri.org/IMessagehubService/MarkAsStaredResponse")]
        bool MarkAsStared(int userId, int[] msgIdsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/MarkAsStared", ReplyAction="http://tempuri.org/IMessagehubService/MarkAsStaredResponse")]
        System.Threading.Tasks.Task<bool> MarkAsStaredAsync(int userId, int[] msgIdsList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/MoveToTrash", ReplyAction="http://tempuri.org/IMessagehubService/MoveToTrashResponse")]
        bool MoveToTrash(int userId, int[] msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/MoveToTrash", ReplyAction="http://tempuri.org/IMessagehubService/MoveToTrashResponse")]
        System.Threading.Tasks.Task<bool> MoveToTrashAsync(int userId, int[] msgId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveCustomermessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveCustomermessageResponse")]
        string SaveCustomermessage(int msgId, string[] customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveCustomermessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveCustomermessageResponse")]
        System.Threading.Tasks.Task<string> SaveCustomermessageAsync(int msgId, string[] customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveEnvValue", ReplyAction="http://tempuri.org/IMessagehubService/SaveEnvValueResponse")]
        int SaveEnvValue(string envType, int id, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveEnvValue", ReplyAction="http://tempuri.org/IMessagehubService/SaveEnvValueResponse")]
        System.Threading.Tasks.Task<int> SaveEnvValueAsync(string envType, int id, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageResponse")]
        int SaveMessage(Gro.Core.DataModels.MessageHubDtos.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageResponse")]
        System.Threading.Tasks.Task<int> SaveMessageAsync(Gro.Core.DataModels.MessageHubDtos.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageExtended", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageExtendedResponse")]
        int SaveMessageExtended(Gro.Core.DataModels.MessageHubDtos.MessageExtended msgExtended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageExtended", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageExtendedResponse")]
        System.Threading.Tasks.Task<int> SaveMessageExtendedAsync(Gro.Core.DataModels.MessageHubDtos.MessageExtended msgExtended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageRightsResponse")]
        int SaveMessageRights(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageRights", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageRightsResponse")]
        System.Threading.Tasks.Task<int> SaveMessageRightsAsync(int userId, int customerId, int msgTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageSettingsResponse")]
        bool SaveMessageSettings(Gro.Core.DataModels.MessageHubDtos.MessageSettings[] setList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageSettings", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageSettingsResponse")]
        System.Threading.Tasks.Task<bool> SaveMessageSettingsAsync(Gro.Core.DataModels.MessageHubDtos.MessageSettings[] setList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveSingleExternalMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveSingleExternalMessageResponse")]
        int SaveSingleExternalMessage(Gro.Core.DataModels.MessageHubDtos.ExternalMessage mess, Gro.Core.DataModels.MessageHubDtos.MessageExtended[] rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveSingleExternalMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveSingleExternalMessageResponse")]
        System.Threading.Tasks.Task<int> SaveSingleExternalMessageAsync(Gro.Core.DataModels.MessageHubDtos.ExternalMessage mess, Gro.Core.DataModels.MessageHubDtos.MessageExtended[] rows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveAdHocMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveAdHocMessageResponse")]
        int SaveAdHocMessage(int MessageAreaId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveAdHocMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveAdHocMessageResponse")]
        System.Threading.Tasks.Task<int> SaveAdHocMessageAsync(int MessageAreaId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveStandardMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveStandardMessageResponse")]
        int SaveStandardMessage(int MessageAreaId, int MessageTypeId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveStandardMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveStandardMessageResponse")]
        System.Threading.Tasks.Task<int> SaveStandardMessageAsync(int MessageAreaId, int MessageTypeId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMsgAndMsgExt", ReplyAction="http://tempuri.org/IMessagehubService/SaveMsgAndMsgExtResponse")]
        int SaveMsgAndMsgExt(System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> msgDict);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMsgAndMsgExt", ReplyAction="http://tempuri.org/IMessagehubService/SaveMsgAndMsgExtResponse")]
        System.Threading.Tasks.Task<int> SaveMsgAndMsgExtAsync(System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> msgDict);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageSimple", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageSimpleResponse")]
        int SaveMessageSimple(
                    string headline, 
                    string msgtext, 
                    System.DateTime validfrom, 
                    System.DateTime validTo, 
                    int messageType, 
                    int messageArea, 
                    int modeOfDelivery, 
                    string customer, 
                    string freightNo, 
                    string carrier, 
                    string carNo, 
                    string mobileNo, 
                    string orderNo, 
                    int orderLine, 
                    string itemName, 
                    double orderQuantity, 
                    double deliveredQuantity, 
                    string container, 
                    string unit, 
                    System.DateTime plannedDeliveryDate, 
                    System.DateTime deliveryDate, 
                    string warehouse, 
                    int userId, 
                    bool msgRead, 
                    int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveMessageSimple", ReplyAction="http://tempuri.org/IMessagehubService/SaveMessageSimpleResponse")]
        System.Threading.Tasks.Task<int> SaveMessageSimpleAsync(
                    string headline, 
                    string msgtext, 
                    System.DateTime validfrom, 
                    System.DateTime validTo, 
                    int messageType, 
                    int messageArea, 
                    int modeOfDelivery, 
                    string customer, 
                    string freightNo, 
                    string carrier, 
                    string carNo, 
                    string mobileNo, 
                    string orderNo, 
                    int orderLine, 
                    string itemName, 
                    double orderQuantity, 
                    double deliveredQuantity, 
                    string container, 
                    string unit, 
                    System.DateTime plannedDeliveryDate, 
                    System.DateTime deliveryDate, 
                    string warehouse, 
                    int userId, 
                    bool msgRead, 
                    int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveUserMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveUserMessageResponse")]
        int SaveUserMessage(Gro.Core.DataModels.MyProfile.UserMessage userMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SaveUserMessage", ReplyAction="http://tempuri.org/IMessagehubService/SaveUserMessageResponse")]
        System.Threading.Tasks.Task<int> SaveUserMessageAsync(Gro.Core.DataModels.MyProfile.UserMessage userMsg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SetMessageReadmode", ReplyAction="http://tempuri.org/IMessagehubService/SetMessageReadmodeResponse")]
        bool SetMessageReadmode(int userId, int[] msgId, bool read);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/SetMessageReadmode", ReplyAction="http://tempuri.org/IMessagehubService/SetMessageReadmodeResponse")]
        System.Threading.Tasks.Task<bool> SetMessageReadmodeAsync(int userId, int[] msgId, bool read);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateMessageStatus", ReplyAction="http://tempuri.org/IMessagehubService/UpdateMessageStatusResponse")]
        Gro.Core.DataModels.MessageHubDtos.Message UpdateMessageStatus(int userId, int msgId, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateMessageStatus", ReplyAction="http://tempuri.org/IMessagehubService/UpdateMessageStatusResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message> UpdateMessageStatusAsync(int userId, int msgId, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateMultipleMessagesStatus", ReplyAction="http://tempuri.org/IMessagehubService/UpdateMultipleMessagesStatusResponse")]
        bool UpdateMultipleMessagesStatus(int userId, string[] msgIds, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateMultipleMessagesStatus", ReplyAction="http://tempuri.org/IMessagehubService/UpdateMultipleMessagesStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateMultipleMessagesStatusAsync(int userId, string[] msgIds, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateSetting", ReplyAction="http://tempuri.org/IMessagehubService/UpdateSettingResponse")]
        bool UpdateSetting(int settingId, bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessagehubService/UpdateSetting", ReplyAction="http://tempuri.org/IMessagehubService/UpdateSettingResponse")]
        System.Threading.Tasks.Task<bool> UpdateSettingAsync(int settingId, bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessagehubServiceChannel : Gro.Infrastructure.Data.MessageHubService.IMessagehubService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagehubServiceClient : System.ServiceModel.ClientBase<Gro.Infrastructure.Data.MessageHubService.IMessagehubService>, Gro.Infrastructure.Data.MessageHubService.IMessagehubService {
        
        public MessagehubServiceClient() {
        }
        
        public MessagehubServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessagehubServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagehubServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessagehubServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries GetPlannedDeliveries(int customerId, string ticket) {
            return base.Channel.GetPlannedDeliveries(customerId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries> GetPlannedDeliveriesAsync(int customerId, string ticket) {
            return base.Channel.GetPlannedDeliveriesAsync(customerId, ticket);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries[] GetPlannedDeliveriesList(int customerId, int messageId, string ticket) {
            return base.Channel.GetPlannedDeliveriesList(customerId, messageId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.PlannedDeliveries[]> GetPlannedDeliveriesListAsync(int customerId, int messageId, string ticket) {
            return base.Channel.GetPlannedDeliveriesListAsync(customerId, messageId, ticket);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.DeliveryInformation GetDeliverySummary(int customerId, int noOfItems) {
            return base.Channel.GetDeliverySummary(customerId, noOfItems);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.DeliveryInformation> GetDeliverySummaryAsync(int customerId, int noOfItems) {
            return base.Channel.GetDeliverySummaryAsync(customerId, noOfItems);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.Category[] Admin_GetCategoriesAndTypes(bool showTipsAndInformation) {
            return base.Channel.Admin_GetCategoriesAndTypes(showTipsAndInformation);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Category[]> Admin_GetCategoriesAndTypesAsync(bool showTipsAndInformation) {
            return base.Channel.Admin_GetCategoriesAndTypesAsync(showTipsAndInformation);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.Message[] Admin_GetMessages(int pageSize, int pageIndex, string[] categories, string[] types, string[] statuses) {
            return base.Channel.Admin_GetMessages(pageSize, pageIndex, categories, types, statuses);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message[]> Admin_GetMessagesAsync(int pageSize, int pageIndex, string[] categories, string[] types, string[] statuses) {
            return base.Channel.Admin_GetMessagesAsync(pageSize, pageIndex, categories, types, statuses);
        }
        
        public int Admin_CountMessages(string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.Admin_CountMessages(allOrUnRead, categories, types, statuses);
        }
        
        public System.Threading.Tasks.Task<int> Admin_CountMessagesAsync(string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.Admin_CountMessagesAsync(allOrUnRead, categories, types, statuses);
        }
        
        public bool DeleteMessage(int msgId) {
            return base.Channel.DeleteMessage(msgId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageAsync(int msgId) {
            return base.Channel.DeleteMessageAsync(msgId);
        }
        
        public bool DeleteEnvValue(string envType, int id) {
            return base.Channel.DeleteEnvValue(envType, id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEnvValueAsync(string envType, int id) {
            return base.Channel.DeleteEnvValueAsync(envType, id);
        }
        
        public bool DeleteFromTrash(int userId, int[] msgIdsList) {
            return base.Channel.DeleteFromTrash(userId, msgIdsList);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFromTrashAsync(int userId, int[] msgIdsList) {
            return base.Channel.DeleteFromTrashAsync(userId, msgIdsList);
        }
        
        public bool DeleteMessageRights(int userId, int customerId, int msgTypeId) {
            return base.Channel.DeleteMessageRights(userId, customerId, msgTypeId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageRightsAsync(int userId, int customerId, int msgTypeId) {
            return base.Channel.DeleteMessageRightsAsync(userId, customerId, msgTypeId);
        }
        
        public bool DeleteMessageSettings(int settingId) {
            return base.Channel.DeleteMessageSettings(settingId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMessageSettingsAsync(int settingId) {
            return base.Channel.DeleteMessageSettingsAsync(settingId);
        }
        
        public bool EmptyTrash(int userId) {
            return base.Channel.EmptyTrash(userId);
        }
        
        public System.Threading.Tasks.Task<bool> EmptyTrashAsync(int userId) {
            return base.Channel.EmptyTrashAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[] GetAllMessages(int userId) {
            return base.Channel.GetAllMessages(userId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[]> GetAllMessagesAsync(int userId) {
            return base.Channel.GetAllMessagesAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.MessageSettingsDisplay GetMsgSettingsDisplay(int userId, int CustomerOrgid) {
            return base.Channel.GetMsgSettingsDisplay(userId, CustomerOrgid);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageSettingsDisplay> GetMsgSettingsDisplayAsync(int userId, int CustomerOrgid) {
            return base.Channel.GetMsgSettingsDisplayAsync(userId, CustomerOrgid);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesForAdHoc() {
            return base.Channel.GetCategoriesForAdHoc();
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesForAdHocAsync() {
            return base.Channel.GetCategoriesForAdHocAsync();
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesByStatus(int userId, string[] statuses) {
            return base.Channel.GetCategoriesByStatus(userId, statuses);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesByStatusAsync(int userId, string[] statuses) {
            return base.Channel.GetCategoriesByStatusAsync(userId, statuses);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategoriesForFilter(int userId) {
            return base.Channel.GetCategoriesForFilter(userId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesForFilterAsync(int userId) {
            return base.Channel.GetCategoriesForFilterAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetCategories(int userId) {
            return base.Channel.GetCategories(userId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetCategoriesAsync(int userId) {
            return base.Channel.GetCategoriesAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetEnvValues(string envType) {
            return base.Channel.GetEnvValues(envType);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetEnvValuesAsync(string envType) {
            return base.Channel.GetEnvValuesAsync(envType);
        }
        
        public int[] GetInboxInformation(int userId) {
            return base.Channel.GetInboxInformation(userId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetInboxInformationAsync(int userId) {
            return base.Channel.GetInboxInformationAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.DeliveryAddress GetDeliveryAddress(string customerNr, string addressId) {
            return base.Channel.GetDeliveryAddress(customerNr, addressId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.DeliveryAddress> GetDeliveryAddressAsync(string customerNr, string addressId) {
            return base.Channel.GetDeliveryAddressAsync(customerNr, addressId);
        }
        
        public System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> GetMessage(int msgId, int userId) {
            return base.Channel.GetMessage(msgId, userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]>> GetMessageAsync(int msgId, int userId) {
            return base.Channel.GetMessageAsync(msgId, userId);
        }
        
        public string[] GetMessageDeliveryTypes() {
            return base.Channel.GetMessageDeliveryTypes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetMessageDeliveryTypesAsync() {
            return base.Channel.GetMessageDeliveryTypesAsync();
        }
        
        public Gro.Core.DataModels.MessageHubDtos.Message GetMessageOnly(int msgId) {
            return base.Channel.GetMessageOnly(msgId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message> GetMessageOnlyAsync(int msgId) {
            return base.Channel.GetMessageOnlyAsync(msgId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[] GetMessagesNotRead(int userId) {
            return base.Channel.GetMessagesNotRead(userId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.UserMessageInfo[]> GetMessagesNotReadAsync(int userId) {
            return base.Channel.GetMessagesNotReadAsync(userId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.MessageRights[] GetMessageRights(int userId, int customerId, int msgTypeId) {
            return base.Channel.GetMessageRights(userId, customerId, msgTypeId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageRights[]> GetMessageRightsAsync(int userId, int customerId, int msgTypeId) {
            return base.Channel.GetMessageRightsAsync(userId, customerId, msgTypeId);
        }
        
        public int CountMessages(int userId, string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.CountMessages(userId, allOrUnRead, categories, types, statuses);
        }
        
        public System.Threading.Tasks.Task<int> CountMessagesAsync(int userId, string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.CountMessagesAsync(userId, allOrUnRead, categories, types, statuses);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.Message[] GetMessages(int userId, int pageSize, int pageIndex, string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.GetMessages(userId, pageSize, pageIndex, allOrUnRead, categories, types, statuses);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message[]> GetMessagesAsync(int userId, int pageSize, int pageIndex, string allOrUnRead, string[] categories, string[] types, string[] statuses) {
            return base.Channel.GetMessagesAsync(userId, pageSize, pageIndex, allOrUnRead, categories, types, statuses);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.MessageSettings[] GetMessageSettings(int userId, int organizationId) {
            return base.Channel.GetMessageSettings(userId, organizationId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.MessageSettings[]> GetMessageSettingsAsync(int userId, int organizationId) {
            return base.Channel.GetMessageSettingsAsync(userId, organizationId);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetMessageTypes() {
            return base.Channel.GetMessageTypes();
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetMessageTypesAsync() {
            return base.Channel.GetMessageTypesAsync();
        }
        
        public Gro.Core.DataModels.MessageHubDtos.EnvTypes[] GetMessageStatuses() {
            return base.Channel.GetMessageStatuses();
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.EnvTypes[]> GetMessageStatusesAsync() {
            return base.Channel.GetMessageStatusesAsync();
        }
        
        public string[] GetReceivers(int msgId) {
            return base.Channel.GetReceivers(msgId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetReceiversAsync(int msgId) {
            return base.Channel.GetReceiversAsync(msgId);
        }
        
        public System.Collections.Generic.KeyValuePair<int, int>[] GetSubscribers(int msgTypeId) {
            return base.Channel.GetSubscribers(msgTypeId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<int, int>[]> GetSubscribersAsync(int msgTypeId) {
            return base.Channel.GetSubscribersAsync(msgTypeId);
        }
        
        public Gro.Core.DataModels.MyProfile.UserMessage[] GetUserMessages(int userId, string allOrUnRead, int startIdx, int endIdx, string categoryIds, string typeIds, string statusId) {
            return base.Channel.GetUserMessages(userId, allOrUnRead, startIdx, endIdx, categoryIds, typeIds, statusId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MyProfile.UserMessage[]> GetUserMessagesAsync(int userId, string allOrUnRead, int startIdx, int endIdx, string categoryIds, string typeIds, string statusId) {
            return base.Channel.GetUserMessagesAsync(userId, allOrUnRead, startIdx, endIdx, categoryIds, typeIds, statusId);
        }
        
        public Gro.Core.DataModels.MyProfile.UserMessage GetUserMessage(int userId, int msgId) {
            return base.Channel.GetUserMessage(userId, msgId);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MyProfile.UserMessage> GetUserMessageAsync(int userId, int msgId) {
            return base.Channel.GetUserMessageAsync(userId, msgId);
        }
        
        public bool MarkAsStared(int userId, int[] msgIdsList) {
            return base.Channel.MarkAsStared(userId, msgIdsList);
        }
        
        public System.Threading.Tasks.Task<bool> MarkAsStaredAsync(int userId, int[] msgIdsList) {
            return base.Channel.MarkAsStaredAsync(userId, msgIdsList);
        }
        
        public bool MoveToTrash(int userId, int[] msgId) {
            return base.Channel.MoveToTrash(userId, msgId);
        }
        
        public System.Threading.Tasks.Task<bool> MoveToTrashAsync(int userId, int[] msgId) {
            return base.Channel.MoveToTrashAsync(userId, msgId);
        }
        
        public string SaveCustomermessage(int msgId, string[] customer) {
            return base.Channel.SaveCustomermessage(msgId, customer);
        }
        
        public System.Threading.Tasks.Task<string> SaveCustomermessageAsync(int msgId, string[] customer) {
            return base.Channel.SaveCustomermessageAsync(msgId, customer);
        }
        
        public int SaveEnvValue(string envType, int id, string description) {
            return base.Channel.SaveEnvValue(envType, id, description);
        }
        
        public System.Threading.Tasks.Task<int> SaveEnvValueAsync(string envType, int id, string description) {
            return base.Channel.SaveEnvValueAsync(envType, id, description);
        }
        
        public int SaveMessage(Gro.Core.DataModels.MessageHubDtos.Message msg) {
            return base.Channel.SaveMessage(msg);
        }
        
        public System.Threading.Tasks.Task<int> SaveMessageAsync(Gro.Core.DataModels.MessageHubDtos.Message msg) {
            return base.Channel.SaveMessageAsync(msg);
        }
        
        public int SaveMessageExtended(Gro.Core.DataModels.MessageHubDtos.MessageExtended msgExtended) {
            return base.Channel.SaveMessageExtended(msgExtended);
        }
        
        public System.Threading.Tasks.Task<int> SaveMessageExtendedAsync(Gro.Core.DataModels.MessageHubDtos.MessageExtended msgExtended) {
            return base.Channel.SaveMessageExtendedAsync(msgExtended);
        }
        
        public int SaveMessageRights(int userId, int customerId, int msgTypeId) {
            return base.Channel.SaveMessageRights(userId, customerId, msgTypeId);
        }
        
        public System.Threading.Tasks.Task<int> SaveMessageRightsAsync(int userId, int customerId, int msgTypeId) {
            return base.Channel.SaveMessageRightsAsync(userId, customerId, msgTypeId);
        }
        
        public bool SaveMessageSettings(Gro.Core.DataModels.MessageHubDtos.MessageSettings[] setList) {
            return base.Channel.SaveMessageSettings(setList);
        }
        
        public System.Threading.Tasks.Task<bool> SaveMessageSettingsAsync(Gro.Core.DataModels.MessageHubDtos.MessageSettings[] setList) {
            return base.Channel.SaveMessageSettingsAsync(setList);
        }
        
        public int SaveSingleExternalMessage(Gro.Core.DataModels.MessageHubDtos.ExternalMessage mess, Gro.Core.DataModels.MessageHubDtos.MessageExtended[] rows) {
            return base.Channel.SaveSingleExternalMessage(mess, rows);
        }
        
        public System.Threading.Tasks.Task<int> SaveSingleExternalMessageAsync(Gro.Core.DataModels.MessageHubDtos.ExternalMessage mess, Gro.Core.DataModels.MessageHubDtos.MessageExtended[] rows) {
            return base.Channel.SaveSingleExternalMessageAsync(mess, rows);
        }
        
        public int SaveAdHocMessage(int MessageAreaId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage) {
            return base.Channel.SaveAdHocMessage(MessageAreaId, emailReceivers, smsReceivers, smsSender, headline, mailMessage, smsMessage);
        }
        
        public System.Threading.Tasks.Task<int> SaveAdHocMessageAsync(int MessageAreaId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage) {
            return base.Channel.SaveAdHocMessageAsync(MessageAreaId, emailReceivers, smsReceivers, smsSender, headline, mailMessage, smsMessage);
        }
        
        public int SaveStandardMessage(int MessageAreaId, int MessageTypeId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage) {
            return base.Channel.SaveStandardMessage(MessageAreaId, MessageTypeId, emailReceivers, smsReceivers, smsSender, headline, mailMessage, smsMessage);
        }
        
        public System.Threading.Tasks.Task<int> SaveStandardMessageAsync(int MessageAreaId, int MessageTypeId, string emailReceivers, string smsReceivers, string smsSender, string headline, string mailMessage, string smsMessage) {
            return base.Channel.SaveStandardMessageAsync(MessageAreaId, MessageTypeId, emailReceivers, smsReceivers, smsSender, headline, mailMessage, smsMessage);
        }
        
        public int SaveMsgAndMsgExt(System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> msgDict) {
            return base.Channel.SaveMsgAndMsgExt(msgDict);
        }
        
        public System.Threading.Tasks.Task<int> SaveMsgAndMsgExtAsync(System.Collections.Generic.Dictionary<Gro.Core.DataModels.MessageHubDtos.Message, Gro.Core.DataModels.MessageHubDtos.MessageExtended[]> msgDict) {
            return base.Channel.SaveMsgAndMsgExtAsync(msgDict);
        }
        
        public int SaveMessageSimple(
                    string headline, 
                    string msgtext, 
                    System.DateTime validfrom, 
                    System.DateTime validTo, 
                    int messageType, 
                    int messageArea, 
                    int modeOfDelivery, 
                    string customer, 
                    string freightNo, 
                    string carrier, 
                    string carNo, 
                    string mobileNo, 
                    string orderNo, 
                    int orderLine, 
                    string itemName, 
                    double orderQuantity, 
                    double deliveredQuantity, 
                    string container, 
                    string unit, 
                    System.DateTime plannedDeliveryDate, 
                    System.DateTime deliveryDate, 
                    string warehouse, 
                    int userId, 
                    bool msgRead, 
                    int status) {
            return base.Channel.SaveMessageSimple(headline, msgtext, validfrom, validTo, messageType, messageArea, modeOfDelivery, customer, freightNo, carrier, carNo, mobileNo, orderNo, orderLine, itemName, orderQuantity, deliveredQuantity, container, unit, plannedDeliveryDate, deliveryDate, warehouse, userId, msgRead, status);
        }
        
        public System.Threading.Tasks.Task<int> SaveMessageSimpleAsync(
                    string headline, 
                    string msgtext, 
                    System.DateTime validfrom, 
                    System.DateTime validTo, 
                    int messageType, 
                    int messageArea, 
                    int modeOfDelivery, 
                    string customer, 
                    string freightNo, 
                    string carrier, 
                    string carNo, 
                    string mobileNo, 
                    string orderNo, 
                    int orderLine, 
                    string itemName, 
                    double orderQuantity, 
                    double deliveredQuantity, 
                    string container, 
                    string unit, 
                    System.DateTime plannedDeliveryDate, 
                    System.DateTime deliveryDate, 
                    string warehouse, 
                    int userId, 
                    bool msgRead, 
                    int status) {
            return base.Channel.SaveMessageSimpleAsync(headline, msgtext, validfrom, validTo, messageType, messageArea, modeOfDelivery, customer, freightNo, carrier, carNo, mobileNo, orderNo, orderLine, itemName, orderQuantity, deliveredQuantity, container, unit, plannedDeliveryDate, deliveryDate, warehouse, userId, msgRead, status);
        }
        
        public int SaveUserMessage(Gro.Core.DataModels.MyProfile.UserMessage userMsg) {
            return base.Channel.SaveUserMessage(userMsg);
        }
        
        public System.Threading.Tasks.Task<int> SaveUserMessageAsync(Gro.Core.DataModels.MyProfile.UserMessage userMsg) {
            return base.Channel.SaveUserMessageAsync(userMsg);
        }
        
        public bool SetMessageReadmode(int userId, int[] msgId, bool read) {
            return base.Channel.SetMessageReadmode(userId, msgId, read);
        }
        
        public System.Threading.Tasks.Task<bool> SetMessageReadmodeAsync(int userId, int[] msgId, bool read) {
            return base.Channel.SetMessageReadmodeAsync(userId, msgId, read);
        }
        
        public Gro.Core.DataModels.MessageHubDtos.Message UpdateMessageStatus(int userId, int msgId, int status) {
            return base.Channel.UpdateMessageStatus(userId, msgId, status);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.MessageHubDtos.Message> UpdateMessageStatusAsync(int userId, int msgId, int status) {
            return base.Channel.UpdateMessageStatusAsync(userId, msgId, status);
        }
        
        public bool UpdateMultipleMessagesStatus(int userId, string[] msgIds, int status) {
            return base.Channel.UpdateMultipleMessagesStatus(userId, msgIds, status);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMultipleMessagesStatusAsync(int userId, string[] msgIds, int status) {
            return base.Channel.UpdateMultipleMessagesStatusAsync(userId, msgIds, status);
        }
        
        public bool UpdateSetting(int settingId, bool value) {
            return base.Channel.UpdateSetting(settingId, value);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSettingAsync(int settingId, bool value) {
            return base.Channel.UpdateSettingAsync(settingId, value);
        }
    }
}
