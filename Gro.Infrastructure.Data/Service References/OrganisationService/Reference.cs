//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gro.Infrastructure.Data.OrganisationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrganisationService.ILM2OrganisationService")]
    public interface ILM2OrganisationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCustomerRegistrationResponse")]
        void TestCustomerRegistration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCustomerRegistrationResponse")]
        System.Threading.Tasks.Task TestCustomerRegistrationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestProfileResponse")]
        void TestProfile();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestProfileResponse")]
        System.Threading.Tasks.Task TestProfileAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCreateCust2", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCreateCust2Response")]
        void TestCreateCust2(byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCreateCust2", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCreateCust2Response")]
        System.Threading.Tasks.Task TestCreateCust2Async(byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCreateCust", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCreateCustResponse")]
        void TestCreateCust();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestCreateCust", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestCreateCustResponse")]
        System.Threading.Tasks.Task TestCreateCustAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SendTemporaryPassword", ReplyAction="http://tempuri.org/ILM2OrganisationService/SendTemporaryPasswordResponse")]
        bool SendTemporaryPassword(string email, string temPwd, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SendTemporaryPassword", ReplyAction="http://tempuri.org/ILM2OrganisationService/SendTemporaryPasswordResponse")]
        System.Threading.Tasks.Task<bool> SendTemporaryPasswordAsync(string email, string temPwd, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveExistingCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveExistingCustomerRegistrationRespon" +
            "se")]
        bool SaveExistingCustomerRegistration(Gro.Core.DataModels.Organization.ExistingUserRegistration registration, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveExistingCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveExistingCustomerRegistrationRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> SaveExistingCustomerRegistrationAsync(Gro.Core.DataModels.Organization.ExistingUserRegistration registration, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetCustomerRegistrationContainer", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetCustomerRegistrationContainerRespon" +
            "se")]
        Gro.Core.DataModels.Organization.CustomerRegistration GetCustomerRegistrationContainer(string customerNr, string organisationNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetCustomerRegistrationContainer", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetCustomerRegistrationContainerRespon" +
            "se")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerRegistration> GetCustomerRegistrationContainerAsync(string customerNr, string organisationNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveCustomerRegistrationResponse")]
        bool SaveCustomerRegistration(Gro.Core.DataModels.Organization.CustomerRegistration registration, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveCustomerRegistration", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveCustomerRegistrationResponse")]
        System.Threading.Tasks.Task<bool> SaveCustomerRegistrationAsync(Gro.Core.DataModels.Organization.CustomerRegistration registration, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/FindMachinePictures", ReplyAction="http://tempuri.org/ILM2OrganisationService/FindMachinePicturesResponse")]
        Gro.Core.DataModels.Organization.OrganisationPicture[] FindMachinePictures(int organisationId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/FindMachinePictures", ReplyAction="http://tempuri.org/ILM2OrganisationService/FindMachinePicturesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture[]> FindMachinePicturesAsync(int organisationId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetMachinePicURLResponse")]
        Gro.Core.DataModels.Organization.OrganisationPicture GetMachinePicURL(int organisationId, string machineId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetMachinePicURLResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture> GetMachinePicURLAsync(int organisationId, string machineId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateMachinePicURLResponse")]
        Gro.Core.DataModels.Organization.OrganisationPicture CreateMachinePicURL(int organisationId, string machineId, string picUrl, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateMachinePicURLResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture> CreateMachinePicURLAsync(int organisationId, string machineId, string picUrl, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteMachinePicURLResponse")]
        bool DeleteMachinePicURL(int id, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteMachinePicURL", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteMachinePicURLResponse")]
        System.Threading.Tasks.Task<bool> DeleteMachinePicURLAsync(int id, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetOrganisationProfileResponse")]
        Gro.Core.DataModels.Organization.CustomerProfile GetOrganisationProfile(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetOrganisationProfileResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerProfile> GetOrganisationProfileAsync(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateOrganisationProfileResponse")]
        Gro.Core.DataModels.Organization.CustomerProfile CreateOrganisationProfile(int customerId, string profileName, string customerNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateOrganisationProfileResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerProfile> CreateOrganisationProfileAsync(int customerId, string profileName, string customerNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveOrganisationProfileResponse")]
        bool SaveOrganisationProfile(Gro.Core.DataModels.Organization.CustomerProfile profile, string customerNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/SaveOrganisationProfile", ReplyAction="http://tempuri.org/ILM2OrganisationService/SaveOrganisationProfileResponse")]
        System.Threading.Tasks.Task<bool> SaveOrganisationProfileAsync(Gro.Core.DataModels.Organization.CustomerProfile profile, string customerNr, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressSilo", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressSiloResponse")]
        Gro.Core.DataModels.Organization.SiloItem CreateDeliveryAddressSilo(string number, string description, string accessibility, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressSilo", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressSiloResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.SiloItem> CreateDeliveryAddressSiloAsync(string number, string description, string accessibility, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressResponse")]
        Gro.Core.DataModels.Organization.CustomerDeliveryAddress CreateDeliveryAddress(int customerId, string street, string zipCode, string city, string phone, string cellphone, string latidtude, string longitude, Gro.Core.DataModels.Organization.SiloItem[] silos, string directions, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerDeliveryAddress> CreateDeliveryAddressAsync(int customerId, string street, string zipCode, string city, string phone, string cellphone, string latidtude, string longitude, Gro.Core.DataModels.Organization.SiloItem[] silos, string directions, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/UpdateDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/UpdateDeliveryAddressResponse")]
        bool UpdateDeliveryAddress(Gro.Core.DataModels.Organization.CustomerDeliveryAddress addres, string tickets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/UpdateDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/UpdateDeliveryAddressResponse")]
        System.Threading.Tasks.Task<bool> UpdateDeliveryAddressAsync(Gro.Core.DataModels.Organization.CustomerDeliveryAddress addres, string tickets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressResponse")]
        bool DeleteDeliveryAddress(int customerId, string AddressNumber, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddress", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressResponse")]
        System.Threading.Tasks.Task<bool> DeleteDeliveryAddressAsync(int customerId, string AddressNumber, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetCustomersDeliveryAddresses", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetCustomersDeliveryAddressesResponse")]
        Gro.Core.DataModels.Organization.CustomerDeliveryAddress[] GetCustomersDeliveryAddresses(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetCustomersDeliveryAddresses", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetCustomersDeliveryAddressesResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerDeliveryAddress[]> GetCustomersDeliveryAddressesAsync(int customerId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetOrganisationResponse")]
        Gro.Core.DataModels.Organization.OrganisationInformation GetOrganisation(int organisationId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetOrganisationResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationInformation> GetOrganisationAsync(int organisationId, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestUpdateOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestUpdateOrganisationResponse")]
        void TestUpdateOrganisation(int organisationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/TestUpdateOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/TestUpdateOrganisationResponse")]
        System.Threading.Tasks.Task TestUpdateOrganisationAsync(int organisationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/UpdateOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/UpdateOrganisationResponse")]
        bool UpdateOrganisation(Gro.Core.DataModels.Organization.OrganisationInformation currVal, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/UpdateOrganisation", ReplyAction="http://tempuri.org/ILM2OrganisationService/UpdateOrganisationResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrganisationAsync(Gro.Core.DataModels.Organization.OrganisationInformation currVal, string ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiversResponse" +
            "")]
        bool CreateDeliveryAddressReceivers(int organisationId, int[] userIds, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiversResponse" +
            "")]
        System.Threading.Tasks.Task<bool> CreateDeliveryAddressReceiversAsync(int organisationId, int[] userIds, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiver", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiverResponse")]
        bool CreateDeliveryAddressReceiver(int organisationId, int userId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiver", ReplyAction="http://tempuri.org/ILM2OrganisationService/CreateDeliveryAddressReceiverResponse")]
        System.Threading.Tasks.Task<bool> CreateDeliveryAddressReceiverAsync(int organisationId, int userId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiversResponse" +
            "")]
        bool DeleteDeliveryAddressReceivers(int organisationId, int[] userIds, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiversResponse" +
            "")]
        System.Threading.Tasks.Task<bool> DeleteDeliveryAddressReceiversAsync(int organisationId, int[] userIds, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiver", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiverResponse")]
        bool DeleteDeliveryAddressReceiver(int organisationId, int userId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiver", ReplyAction="http://tempuri.org/ILM2OrganisationService/DeleteDeliveryAddressReceiverResponse")]
        System.Threading.Tasks.Task<bool> DeleteDeliveryAddressReceiverAsync(int organisationId, int userId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetDeliveryAddressReceiversResponse")]
        Gro.Core.DataModels.Organization.DeliveryReceiver[] GetDeliveryAddressReceivers(int organisationId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/GetDeliveryAddressReceivers", ReplyAction="http://tempuri.org/ILM2OrganisationService/GetDeliveryAddressReceiversResponse")]
        System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.DeliveryReceiver[]> GetDeliveryAddressReceiversAsync(int organisationId, string addressNr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/ContactCustomerService", ReplyAction="http://tempuri.org/ILM2OrganisationService/ContactCustomerServiceResponse")]
        bool ContactCustomerService(string subject, string message, bool sendCopy, string userEmailAddress, string ticket, string name, string customerNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILM2OrganisationService/ContactCustomerService", ReplyAction="http://tempuri.org/ILM2OrganisationService/ContactCustomerServiceResponse")]
        System.Threading.Tasks.Task<bool> ContactCustomerServiceAsync(string subject, string message, bool sendCopy, string userEmailAddress, string ticket, string name, string customerNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILM2OrganisationServiceChannel : Gro.Infrastructure.Data.OrganisationService.ILM2OrganisationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LM2OrganisationServiceClient : System.ServiceModel.ClientBase<Gro.Infrastructure.Data.OrganisationService.ILM2OrganisationService>, Gro.Infrastructure.Data.OrganisationService.ILM2OrganisationService {
        
        public LM2OrganisationServiceClient() {
        }
        
        public LM2OrganisationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LM2OrganisationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LM2OrganisationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LM2OrganisationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void TestCustomerRegistration() {
            base.Channel.TestCustomerRegistration();
        }
        
        public System.Threading.Tasks.Task TestCustomerRegistrationAsync() {
            return base.Channel.TestCustomerRegistrationAsync();
        }
        
        public void TestProfile() {
            base.Channel.TestProfile();
        }
        
        public System.Threading.Tasks.Task TestProfileAsync() {
            return base.Channel.TestProfileAsync();
        }
        
        public void TestCreateCust2(byte[] file) {
            base.Channel.TestCreateCust2(file);
        }
        
        public System.Threading.Tasks.Task TestCreateCust2Async(byte[] file) {
            return base.Channel.TestCreateCust2Async(file);
        }
        
        public void TestCreateCust() {
            base.Channel.TestCreateCust();
        }
        
        public System.Threading.Tasks.Task TestCreateCustAsync() {
            return base.Channel.TestCreateCustAsync();
        }
        
        public bool SendTemporaryPassword(string email, string temPwd, string ticket) {
            return base.Channel.SendTemporaryPassword(email, temPwd, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> SendTemporaryPasswordAsync(string email, string temPwd, string ticket) {
            return base.Channel.SendTemporaryPasswordAsync(email, temPwd, ticket);
        }
        
        public bool SaveExistingCustomerRegistration(Gro.Core.DataModels.Organization.ExistingUserRegistration registration, string ticket) {
            return base.Channel.SaveExistingCustomerRegistration(registration, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> SaveExistingCustomerRegistrationAsync(Gro.Core.DataModels.Organization.ExistingUserRegistration registration, string ticket) {
            return base.Channel.SaveExistingCustomerRegistrationAsync(registration, ticket);
        }
        
        public Gro.Core.DataModels.Organization.CustomerRegistration GetCustomerRegistrationContainer(string customerNr, string organisationNr, string ticket) {
            return base.Channel.GetCustomerRegistrationContainer(customerNr, organisationNr, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerRegistration> GetCustomerRegistrationContainerAsync(string customerNr, string organisationNr, string ticket) {
            return base.Channel.GetCustomerRegistrationContainerAsync(customerNr, organisationNr, ticket);
        }
        
        public bool SaveCustomerRegistration(Gro.Core.DataModels.Organization.CustomerRegistration registration, string ticket) {
            return base.Channel.SaveCustomerRegistration(registration, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> SaveCustomerRegistrationAsync(Gro.Core.DataModels.Organization.CustomerRegistration registration, string ticket) {
            return base.Channel.SaveCustomerRegistrationAsync(registration, ticket);
        }
        
        public Gro.Core.DataModels.Organization.OrganisationPicture[] FindMachinePictures(int organisationId, string ticket) {
            return base.Channel.FindMachinePictures(organisationId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture[]> FindMachinePicturesAsync(int organisationId, string ticket) {
            return base.Channel.FindMachinePicturesAsync(organisationId, ticket);
        }
        
        public Gro.Core.DataModels.Organization.OrganisationPicture GetMachinePicURL(int organisationId, string machineId, string ticket) {
            return base.Channel.GetMachinePicURL(organisationId, machineId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture> GetMachinePicURLAsync(int organisationId, string machineId, string ticket) {
            return base.Channel.GetMachinePicURLAsync(organisationId, machineId, ticket);
        }
        
        public Gro.Core.DataModels.Organization.OrganisationPicture CreateMachinePicURL(int organisationId, string machineId, string picUrl, string ticket) {
            return base.Channel.CreateMachinePicURL(organisationId, machineId, picUrl, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationPicture> CreateMachinePicURLAsync(int organisationId, string machineId, string picUrl, string ticket) {
            return base.Channel.CreateMachinePicURLAsync(organisationId, machineId, picUrl, ticket);
        }
        
        public bool DeleteMachinePicURL(int id, string ticket) {
            return base.Channel.DeleteMachinePicURL(id, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMachinePicURLAsync(int id, string ticket) {
            return base.Channel.DeleteMachinePicURLAsync(id, ticket);
        }
        
        public Gro.Core.DataModels.Organization.CustomerProfile GetOrganisationProfile(int customerId, string ticket) {
            return base.Channel.GetOrganisationProfile(customerId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerProfile> GetOrganisationProfileAsync(int customerId, string ticket) {
            return base.Channel.GetOrganisationProfileAsync(customerId, ticket);
        }
        
        public Gro.Core.DataModels.Organization.CustomerProfile CreateOrganisationProfile(int customerId, string profileName, string customerNr, string ticket) {
            return base.Channel.CreateOrganisationProfile(customerId, profileName, customerNr, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerProfile> CreateOrganisationProfileAsync(int customerId, string profileName, string customerNr, string ticket) {
            return base.Channel.CreateOrganisationProfileAsync(customerId, profileName, customerNr, ticket);
        }
        
        public bool SaveOrganisationProfile(Gro.Core.DataModels.Organization.CustomerProfile profile, string customerNr, string ticket) {
            return base.Channel.SaveOrganisationProfile(profile, customerNr, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> SaveOrganisationProfileAsync(Gro.Core.DataModels.Organization.CustomerProfile profile, string customerNr, string ticket) {
            return base.Channel.SaveOrganisationProfileAsync(profile, customerNr, ticket);
        }
        
        public Gro.Core.DataModels.Organization.SiloItem CreateDeliveryAddressSilo(string number, string description, string accessibility, string ticket) {
            return base.Channel.CreateDeliveryAddressSilo(number, description, accessibility, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.SiloItem> CreateDeliveryAddressSiloAsync(string number, string description, string accessibility, string ticket) {
            return base.Channel.CreateDeliveryAddressSiloAsync(number, description, accessibility, ticket);
        }
        
        public Gro.Core.DataModels.Organization.CustomerDeliveryAddress CreateDeliveryAddress(int customerId, string street, string zipCode, string city, string phone, string cellphone, string latidtude, string longitude, Gro.Core.DataModels.Organization.SiloItem[] silos, string directions, string ticket) {
            return base.Channel.CreateDeliveryAddress(customerId, street, zipCode, city, phone, cellphone, latidtude, longitude, silos, directions, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerDeliveryAddress> CreateDeliveryAddressAsync(int customerId, string street, string zipCode, string city, string phone, string cellphone, string latidtude, string longitude, Gro.Core.DataModels.Organization.SiloItem[] silos, string directions, string ticket) {
            return base.Channel.CreateDeliveryAddressAsync(customerId, street, zipCode, city, phone, cellphone, latidtude, longitude, silos, directions, ticket);
        }
        
        public bool UpdateDeliveryAddress(Gro.Core.DataModels.Organization.CustomerDeliveryAddress addres, string tickets) {
            return base.Channel.UpdateDeliveryAddress(addres, tickets);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDeliveryAddressAsync(Gro.Core.DataModels.Organization.CustomerDeliveryAddress addres, string tickets) {
            return base.Channel.UpdateDeliveryAddressAsync(addres, tickets);
        }
        
        public bool DeleteDeliveryAddress(int customerId, string AddressNumber, string ticket) {
            return base.Channel.DeleteDeliveryAddress(customerId, AddressNumber, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDeliveryAddressAsync(int customerId, string AddressNumber, string ticket) {
            return base.Channel.DeleteDeliveryAddressAsync(customerId, AddressNumber, ticket);
        }
        
        public Gro.Core.DataModels.Organization.CustomerDeliveryAddress[] GetCustomersDeliveryAddresses(int customerId, string ticket) {
            return base.Channel.GetCustomersDeliveryAddresses(customerId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.CustomerDeliveryAddress[]> GetCustomersDeliveryAddressesAsync(int customerId, string ticket) {
            return base.Channel.GetCustomersDeliveryAddressesAsync(customerId, ticket);
        }
        
        public Gro.Core.DataModels.Organization.OrganisationInformation GetOrganisation(int organisationId, string ticket) {
            return base.Channel.GetOrganisation(organisationId, ticket);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.OrganisationInformation> GetOrganisationAsync(int organisationId, string ticket) {
            return base.Channel.GetOrganisationAsync(organisationId, ticket);
        }
        
        public void TestUpdateOrganisation(int organisationId) {
            base.Channel.TestUpdateOrganisation(organisationId);
        }
        
        public System.Threading.Tasks.Task TestUpdateOrganisationAsync(int organisationId) {
            return base.Channel.TestUpdateOrganisationAsync(organisationId);
        }
        
        public bool UpdateOrganisation(Gro.Core.DataModels.Organization.OrganisationInformation currVal, string ticket) {
            return base.Channel.UpdateOrganisation(currVal, ticket);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrganisationAsync(Gro.Core.DataModels.Organization.OrganisationInformation currVal, string ticket) {
            return base.Channel.UpdateOrganisationAsync(currVal, ticket);
        }
        
        public bool CreateDeliveryAddressReceivers(int organisationId, int[] userIds, string addressNr) {
            return base.Channel.CreateDeliveryAddressReceivers(organisationId, userIds, addressNr);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDeliveryAddressReceiversAsync(int organisationId, int[] userIds, string addressNr) {
            return base.Channel.CreateDeliveryAddressReceiversAsync(organisationId, userIds, addressNr);
        }
        
        public bool CreateDeliveryAddressReceiver(int organisationId, int userId, string addressNr) {
            return base.Channel.CreateDeliveryAddressReceiver(organisationId, userId, addressNr);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDeliveryAddressReceiverAsync(int organisationId, int userId, string addressNr) {
            return base.Channel.CreateDeliveryAddressReceiverAsync(organisationId, userId, addressNr);
        }
        
        public bool DeleteDeliveryAddressReceivers(int organisationId, int[] userIds, string addressNr) {
            return base.Channel.DeleteDeliveryAddressReceivers(organisationId, userIds, addressNr);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDeliveryAddressReceiversAsync(int organisationId, int[] userIds, string addressNr) {
            return base.Channel.DeleteDeliveryAddressReceiversAsync(organisationId, userIds, addressNr);
        }
        
        public bool DeleteDeliveryAddressReceiver(int organisationId, int userId, string addressNr) {
            return base.Channel.DeleteDeliveryAddressReceiver(organisationId, userId, addressNr);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDeliveryAddressReceiverAsync(int organisationId, int userId, string addressNr) {
            return base.Channel.DeleteDeliveryAddressReceiverAsync(organisationId, userId, addressNr);
        }
        
        public Gro.Core.DataModels.Organization.DeliveryReceiver[] GetDeliveryAddressReceivers(int organisationId, string addressNr) {
            return base.Channel.GetDeliveryAddressReceivers(organisationId, addressNr);
        }
        
        public System.Threading.Tasks.Task<Gro.Core.DataModels.Organization.DeliveryReceiver[]> GetDeliveryAddressReceiversAsync(int organisationId, string addressNr) {
            return base.Channel.GetDeliveryAddressReceiversAsync(organisationId, addressNr);
        }
        
        public bool ContactCustomerService(string subject, string message, bool sendCopy, string userEmailAddress, string ticket, string name, string customerNumber) {
            return base.Channel.ContactCustomerService(subject, message, sendCopy, userEmailAddress, ticket, name, customerNumber);
        }
        
        public System.Threading.Tasks.Task<bool> ContactCustomerServiceAsync(string subject, string message, bool sendCopy, string userEmailAddress, string ticket, string name, string customerNumber) {
            return base.Channel.ContactCustomerServiceAsync(subject, message, sendCopy, userEmailAddress, ticket, name, customerNumber);
        }
    }
}
