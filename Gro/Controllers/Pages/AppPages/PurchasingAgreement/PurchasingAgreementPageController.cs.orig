using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Mvc;
using EPiServer.Framework.DataAnnotations;
using Gro.Core.ContentTypes.Pages;
using Gro.Core.ContentTypes.Pages.AppPages.PurchasingAgreement;
using Gro.Core.ContentTypes.Utils;
using Gro.Core.DataModels.PurchasingAgreements;
using Gro.Core.DataModels.Security;
using Gro.Core.Interfaces;
using Gro.Helpers;
using Gro.ViewModels.Pages.AppPages.PurchasingAgreement;

namespace Gro.Controllers.Pages.AppPages.PurchasingAgreement
{
    [TemplateDescriptor(Inherited = true)]
    public class PurchasingAgreementPageController : SiteControllerBase<PurchasingAgreementPage>
    {
        private readonly IPurchasingAgreementRepository _agreementRepository;
        private static SettingsPage SettingPage => ContentExtensions.GetSettingsPage();

        public PurchasingAgreementPageController(
            IPurchasingAgreementRepository agreementRepository)
        {
            _agreementRepository = agreementRepository;
        }

        public async Task<ActionResult> Index(PurchasingAgreementPage currentPage)
        {
            var supplier = UserManager.GetActiveCustomer(HttpContext);

            if (SiteUser == null || supplier == null)
            {
                ViewData["NotLoggedIn"] = true;
                return View("~/Views/AppPages/PurchasingAgreementPage/Index.cshtml", new PurchasingAgreementViewModel(currentPage));
            }
<<<<<<< HEAD
            var priceAreaId = GetPriceAreaId();
            var model = await CreateViewModel(currentPage, supplier.CustomerNo, priceAreaId.ToString());
            var viewName = GetViewName(currentPage.AgreementType);
=======
            var priceAreaId = "1";
            var model = await CreateViewModel(currentPage, supplier.CustomerNo, priceAreaId);
            var viewName = "Index";
            switch (currentPage.AgreementType)
            {
                case AgreementType.Poolavtal:
                case AgreementType.Depaavtal:
                    viewName = "PoolAndDepaAgreement";
                    break;
                case AgreementType.PrissakringDepaavtal:
                case AgreementType.SportAndForwardAvtal:
                    viewName = "PurchasingAgreement";
                    break;
            }
>>>>>>> 5f7222308973686fc71ec1b4eee4c9daaba42583

            return View($"~/Views/AppPages/PurchasingAgreementPage/{viewName}.cshtml", model);
        }

        private int GetPriceAreaId()
        {
            //TODO: update later with the service
            return 3;
        }

        private string GetViewName(string agreementType)
        {
            if (agreementType == AgreementType.PrissakringDepaavtal) return "ProtectStorageAgreement";
            if (agreementType == AgreementType.SportAndForwardAvtal) return "SpotAndForwardAgreement";
            return "Index";
        }

        private async Task<PurchasingAgreementViewModel> CreateViewModel(PurchasingAgreementPage currentPage, string customerNo, string priceAreaId = "", string productionItemId = "", string grainTypeId = "", string agreementId = "")
        {
            var viewModel = new PurchasingAgreementViewModel(currentPage);
<<<<<<< HEAD
            Dictionary<string, string> periods = new Dictionary<string, string>();
            if (currentPage.AgreementType == AgreementType.PrissakringDepaavtal)
            {
#if DEBUG
                customerNo = "1000000";
#endif
                var storageAgreements = await _agreementRepository.GetStorageAgreementsForPriceProtectionAsync(customerNo);
                storageAgreements = storageAgreements ?? new StorageAgreement[0];
                var selectedStorageAgreement = storageAgreements.Any() && !string.IsNullOrEmpty(agreementId) ? storageAgreements.FirstOrDefault(x => x.AgreementId == agreementId) : null;
                periods = !string.IsNullOrEmpty(productionItemId) ? await _agreementRepository.GetPeriodsPriceProtectingStorageAgreementAsync(priceAreaId, productionItemId, grainTypeId)
                    : new Dictionary<string, string>();
                viewModel.StorageAgreements = storageAgreements.ToList();
                viewModel.SelectedAgreement = selectedStorageAgreement;
                viewModel.ReferencePrice = GetReferencePrice();
                viewModel.MinPrice = SettingPage.PurchasePriceLow;
                viewModel.CommitQuantityMin = 12;
                viewModel.FormModel = new PurchasingAgreementFormModel();
            }
            else if (currentPage.AgreementType == AgreementType.SportAndForwardAvtal)
            {
                var products = _agreementRepository.GetProductsSpotAndForwardAgreement(priceAreaId);
                var grainTypes = !string.IsNullOrEmpty(productionItemId)
                    ?await _agreementRepository.GetGrainTypesSpotAndForwardAgreementAsync(productionItemId, priceAreaId) : new Product[0];
                periods = !string.IsNullOrEmpty(productionItemId)
                   ? await _agreementRepository.GetPeriodsSpotAndForwardAgreementAsync(priceAreaId)
                   : new Dictionary<string, string>();
                viewModel.Products = products;
                viewModel.GrainTypes = grainTypes;
            }
            viewModel.Periods = periods;
=======
            switch (currentPage.AgreementType)
            {
                case AgreementType.PrissakringDepaavtal:
                    var storageAgreements = await _agreementRepository.GetStorageAgreementsForPriceProtectionAsync(customerNo);
                    storageAgreements = storageAgreements ?? new StorageAgreement[0];
                    var selectedStorageAgreement = storageAgreements.Any() && !string.IsNullOrEmpty(agreementId) ? storageAgreements.FirstOrDefault(x => x.AgreementId == agreementId) : null;
                    var periods = !string.IsNullOrEmpty(productionItemId) ? await _agreementRepository.GetPeriodsPriceProtectingStorageAgreementAsync(priceAreaId, productionItemId, grainTypeId)
                        : new Dictionary<string, string>();
                    viewModel.StorageAgreements = storageAgreements.ToList();
                    viewModel.Periods = periods;
                    viewModel.SelectedAgreement = selectedStorageAgreement;
                    viewModel.ReferencePrice = GetReferencePrice();
                    viewModel.MinPrice = SettingPage.PurchasePriceLow;
                    viewModel.CommitQuantityMin = 12;
                    viewModel.FormModel = new PurchasingAgreementFormModel();
                    break;
                case AgreementType.Poolavtal:
                case AgreementType.Depaavtal:
                    viewModel.SelectedPriceAreaId = priceAreaId;

                    var priceAreas = await _agreementRepository.GetPriceAreasAsync(customerNo);
                    priceAreas = priceAreas ?? await Task.FromResult(new PriceArea[0]);
                    viewModel.SelectedPriceArea = priceAreas.FirstOrDefault(x => x.PriceAreaId.Equals(viewModel.SelectedPriceAreaId)) ?? priceAreas.FirstOrDefault();

                    viewModel.Products = (await _agreementRepository.GetProductsPoolAgreementAsync(priceAreaId))?.ToList();
                    viewModel.ModesOfDelivery = await _agreementRepository.GetModesOfDeliveryPoolAgreementAsync();
                    viewModel.Periods = ConvertPeriodToMonthRange(await _agreementRepository.GetPeriodsPoolAgreementAsync(priceAreaId));

                    break;
            }

>>>>>>> 5f7222308973686fc71ec1b4eee4c9daaba42583
            return viewModel;
        }

        private int GetReferencePrice()
        {
            //TODO: implement later when the service is ready
            return 1480;
        }

        [HttpGet]
        [Route("api/agreement/get-protect-agreement")]
        public async Task<JsonResult> GetProtectAgreement(string agreementId = "")
        {
            var supplier = UserManager.GetActiveCustomer(HttpContext);
            if (SiteUser == null || supplier == null)
            {
                return Json(new { }, JsonRequestBehavior.AllowGet);
            }
            var agreement = !string.IsNullOrEmpty(agreementId)
                ? await _agreementRepository.GetStorageAgreementValuesForPriceProtectionAsync(agreementId)
                : null;
            Object viewInfor = new { };
            if (agreement != null)
            {
                var productItemName = agreement.ProductItemName;
                var grainType = agreement.GrainType;
                var periods = await _agreementRepository.GetPeriodsPriceProtectingStorageAgreementAsync(agreement.PriceArea.ToString(), agreement.ProductItemId, agreement.GrainType);
                var periodsView = this.RenderPartialViewToString("~/Views/AppPages/PurchasingAgreementPage/Partial/PricePeriodsList.cshtml", periods);
                viewInfor = new
                {
                    productItemName = productItemName,
                    grainType = grainType,
                    periodsView = periodsView
                };
            }
            return Json(viewInfor, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        [Route("api/agreement/get-grain-type")]
        public async Task<JsonResult> GetGrainTypes(string priceAreaId, string productItemId)
        {
            var supplier = UserManager.GetActiveCustomer(HttpContext);
            if (SiteUser == null || supplier == null)
            {
                return Json(new { }, JsonRequestBehavior.AllowGet);
            }
            var grainType = await _agreementRepository.GetGrainTypesPoolAgreementAsync(priceAreaId, productItemId);
            return Json(grainType, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        public async Task<ActionResult> SaveAgreement(PurchasingAgreementPage currentPage, PurchasingAgreementFormModel formModel)
        {
            if (formModel == null || (formModel.AgreementId == 0 && currentPage.AgreementType == AgreementType.PrissakringDepaavtal))
            {
                return RedirectToAction("Index");
            }

            var activeCustomer = UserManager.GetActiveCustomer(HttpContext);
            if (SiteUser == null || activeCustomer == null) { return HttpNotFound(); }
            formModel.LowerPrice = 12;
            formModel.UpperPrice = 15;

            AgreementResponse savedAgreement = null;
            if (currentPage.AgreementType == AgreementType.PrissakringDepaavtal)
            {
                savedAgreement = await SavePriceProtectedStorageAgreement(formModel, activeCustomer.CustomerName);
            }
            else if (currentPage.AgreementType == AgreementType.Poolavtal)
            {
                savedAgreement = await SavePoolAgreement(formModel, activeCustomer);
            }

            if (savedAgreement?.Id == null)
            {
                TempData["Error"] = true;
            }
            else
            {
                TempData["Saved"] = true;
            }
            return RedirectToAction("Index");
        }

        private async Task<AgreementResponse> SavePoolAgreement(PurchasingAgreementFormModel formModel, CustomerBasicInfo customer)
        {
            var purchaseDateObject = GenerateFromDatePeriod(formModel.AgreementPeriod);
            var spotAgreement = new PoolAgreement()
            {
                PriceArea = formModel.PriceArea,
                PriceType = formModel.PriceType,
                HarvestYear = purchaseDateObject.HarvestYear,
                ValidTo = purchaseDateObject.ValidTo,
                ValidFrom = purchaseDateObject.ValidFrom,
                ModeOfDelivery = formModel.DeliveryMode,
                Quantity = formModel.CommitQuantity,
                ProductItemId = formModel.ProductItemId,
                GrainType = formModel.GrainType,
                CustomerId = customer.CustomerNo,
            };

            return await _agreementRepository.SavePoolAgreement(spotAgreement);
        }

        private async Task<AgreementResponse> SavePriceProtectedStorageAgreement(PurchasingAgreementFormModel formModel, string customerName)
        {
            var agreement = new PriceProtectStorageAgreement()
            {
                CustomerUserName = customerName,
                WatchPrice = formModel.UpperPrice,
                WatchPriceMinimum = formModel.LowerPrice,
                WatchDate = formModel.PriceWatchEndDate,
                AgreementId = formModel.AgreementId.ToString(),
                WatchAction = formModel.TargetAction,
                PriceType = formModel.PriceType
            };
            return await _agreementRepository.SavePriceProtectedStorageAgreementAsync(agreement);
        }

        private Dictionary<string, string> ConvertPeriodToMonthRange(Dictionary<string, string> periods)
        {
            return periods.ToDictionary(period => period.Value, period => $"{GetMonth(period.Value.Substring(4, 2))}-{GetMonth(period.Value.Substring(13, 2))}");
        }

        private static string GetMonth(string mm)
        {
            switch (mm)
            {
                case "01":
                    return "Jan";
                case "02":
                    return "Feb";
                case "03":
                    return "Mar";
                case "04":
                    return "Apr";
                case "05":
                    return "Maj";
                case "06":
                    return "Jun";
                case "07":
                    return "Jul";
                case "08":
                    return "Aug";
                case "09":
                    return "Sep";
                case "10":
                    return "Okt";
                case "11":
                    return "Nov";
                case "12":
                    return "Dec";
                default:
                    return string.Empty;
            }
        }

        private static PurchaseAgreementDates GenerateFromDatePeriod(string datePeriod)
        {
            if (string.IsNullOrEmpty(datePeriod)) return new PurchaseAgreementDates();
            var startDate = datePeriod.Substring(0, 8);
            var endDate = datePeriod.Substring(9, 8);

            var validFrom = DateTime.ParseExact(startDate, "yyyyMMdd", CultureInfo.InvariantCulture);
            var validTo = DateTime.ParseExact(endDate, "yyyyMMdd", CultureInfo.InvariantCulture);

            var startDateYYYY = int.Parse(startDate.Substring(0, 4));
            var startDateMMdd = int.Parse(startDate.Substring(4, 4));

            var harvestYear = startDateMMdd < 701 ? startDateYYYY - 1 : startDateYYYY;

            return new PurchaseAgreementDates()
            {
                ValidFrom = validFrom,
                ValidTo = validTo,
                HarvestYear = harvestYear
            };
        }
    }
}
